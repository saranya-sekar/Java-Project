{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOzcY44P3mx5/hqBxnBqr46",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saranya-sekar/Java-Project/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OceXIc-uaTlm",
        "outputId": "b34afa86-9fd7-4c42-a105-11f9588323f1"
      },
      "source": [
        "print('Hai')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hai\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u7xi5ePSagBB",
        "outputId": "bab5aa93-dea5-483f-af39-f31aba9f0092"
      },
      "source": [
        "print('Hello')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MIZ5oSc-ane2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4026a36b-09c2-4424-81b8-a0be78df7f83"
      },
      "source": [
        "def sum_fun(*a):\r\n",
        "    print(a)\r\n",
        "    SUM=0\r\n",
        "    for num in a:\r\n",
        "      for i in num:\r\n",
        "        print(i)\r\n",
        "        SUM += i\r\n",
        "        print(SUM)\r\n",
        "      return SUM\r\n",
        "\r\n",
        "x = list(map(int, input(\"Enter a multiple value: \").split(',')))\r\n",
        "print(\"List of students: \", x)\r\n",
        "sum_fun(x)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a multiple value: 1,2,3\n",
            "List of students:  [1, 2, 3]\n",
            "([1, 2, 3],)\n",
            "1\n",
            "1\n",
            "2\n",
            "3\n",
            "3\n",
            "6\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hVGVnt4RUR8S"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4RW1huc2USQk"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9vILd87AUSUy",
        "outputId": "21ab49e6-056e-453b-894f-127d26751b47"
      },
      "source": [
        "import array as arr\r\n",
        "\r\n",
        "input_value=[]\r\n",
        "target_sum=0\r\n",
        "try:\r\n",
        "  input_value = list(map(int, input(\"Enter a multiple value: \").split(',')))\r\n",
        "  print(input_value)\r\n",
        "  input_value=arr.array('i',input_value)\r\n",
        "  target_sum = int(input(\"Enter a target sum: \"))\r\n",
        "  \r\n",
        "  if input_value:\r\n",
        "    print(\"Array has values:\",input_value)\r\n",
        "      \r\n",
        "except ValueError:\r\n",
        "  if not input_value:\r\n",
        "    print(\"Empty Array:\",input_value,\"\\n Please enter a valid input\")\r\n",
        "\r\n",
        "for i in input_value:\r\n",
        "  for j in input_value:\r\n",
        "    if (i!=j):\r\n",
        "      if (i+j) == target_sum:\r\n",
        "        print(\"The sum of {} {}\".format(i,j),\"is equal to target sum {}\".format(target_sum),\"Returning \",i,j)\r\n",
        "        \r\n",
        "    #if (i+j) != target_sum:\r\n",
        "      #print(\"The sum of {} {}\".format(i,j),\"is not equal to target sum {}\".format(target_sum),\"Returning\",[])\r\n",
        "    \r\n",
        "\r\n",
        "          \r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        " \r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a multiple value: 3,5,-4,8,11,1,-1,6,5\n",
            "[3, 5, -4, 8, 11, 1, -1, 6, 5]\n",
            "Enter a target sum: 10\n",
            "Array has values: array('i', [3, 5, -4, 8, 11, 1, -1, 6, 5])\n",
            "The sum of 11 -1 is equal to target sum 10 Returning  11 -1\n",
            "The sum of -1 11 is equal to target sum 10 Returning  -1 11\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H9BuPNwbdXmK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "04e29dff-53a2-4d94-c9aa-49a6a7acb169"
      },
      "source": [
        "import array as arr\r\n",
        "\r\n",
        "input_value=[]\r\n",
        "target_sum=0\r\n",
        "input_length = len(input_value)-1   \r\n",
        "start = 0\r\n",
        "i=0\r\n",
        "\r\n",
        "\r\n",
        "try:\r\n",
        "  input_value = list(map(int, input(\"Enter a multiple value: \").split(',')))\r\n",
        "  print(input_value)\r\n",
        "  input_value=arr.array('i',input_value)\r\n",
        "  target_sum = int(input(\"Enter a target sum: \"))\r\n",
        "  \r\n",
        "  if input_value:\r\n",
        "    print(\"Array has values:\",input_value)\r\n",
        "      \r\n",
        "except ValueError:\r\n",
        "  if not input_value:\r\n",
        "    print(\"Empty Array:\",input_value,\"\\n Please enter a valid input\")\r\n",
        "\r\n",
        "def sample_sum_test(input_value,input_length,target_sum):\r\n",
        "  input_index =0\r\n",
        "  print(input_value,input_length,target_sum)\r\n",
        "  for input_index in range(0,input_length):\r\n",
        "    #if ((input_value[input_index] + input_value[input_index+1]) != target_sum ):\r\n",
        "    print(\"No two numbers sum to target\")\r\n",
        "    input_index +=1\r\n",
        "  return input_value[input_index],input_value[input_index+1]\r\n",
        "\r\n",
        "\r\n",
        "x=sample_sum_test(input_value,input_length,target_sum)\r\n",
        "print(x)\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a multiple value: 3,5,-4,8,11,1,-1,6\n",
            "[3, 5, -4, 8, 11, 1, -1, 6]\n",
            "Enter a target sum: 10\n",
            "Array has values: array('i', [3, 5, -4, 8, 11, 1, -1, 6])\n",
            "array('i', [3, 5, -4, 8, 11, 1, -1, 6]) -1 10\n",
            "(3, 5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QC4M5cXYmlOm"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "scCcVKMXs7Bf",
        "outputId": "258976bf-89d8-4bef-8004-1a812ea2fcd9"
      },
      "source": [
        "# Function to find a pair in an array with a given sum using hashing\r\n",
        "def findPair(A, sum):\r\n",
        " \r\n",
        "    # create an empty dictionary\r\n",
        "    dict = {}\r\n",
        " \r\n",
        "    # do for each element\r\n",
        "    for i, e in enumerate(A):\r\n",
        " \r\n",
        "        # check if pair (e, sum-e) exists\r\n",
        "        print(\"i\",i)\r\n",
        "        print(\"e\",e)\r\n",
        "        # if the difference is seen before, print the pair\r\n",
        "        if sum - e in dict:\r\n",
        "            print(i,'/////////////////')\r\n",
        "            print(sum)\r\n",
        "            print(e)\r\n",
        "            print(sum - e, '1111111111111')\r\n",
        "            print(dict)\r\n",
        "            print(\"Pair found at index\", dict.get(sum - e), \"and\", i)\r\n",
        "            return\r\n",
        "\r\n",
        " \r\n",
        "        # store index of the current element in the dictionary\r\n",
        "        dict[e] = i\r\n",
        "        print(\"dict[e]\",dict[e])\r\n",
        " \r\n",
        "    # No pair with the given sum exists in the list\r\n",
        "    print(\"Pair not found\")\r\n",
        " \r\n",
        " \r\n",
        "if __name__ == '__main__':\r\n",
        " \r\n",
        "    A = [3,5,-4,8,11,1,-1,6]\r\n",
        "    sum = 10\r\n",
        " \r\n",
        "    findPair(A, sum)\r\n",
        " "
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "i 0\n",
            "e 3\n",
            "dict[e] 0\n",
            "i 1\n",
            "e 5\n",
            "dict[e] 1\n",
            "i 2\n",
            "e -4\n",
            "dict[e] 2\n",
            "i 3\n",
            "e 8\n",
            "dict[e] 3\n",
            "i 4\n",
            "e 11\n",
            "dict[e] 4\n",
            "i 5\n",
            "e 1\n",
            "dict[e] 5\n",
            "i 6\n",
            "e -1\n",
            "6 /////////////////\n",
            "10\n",
            "-1\n",
            "11 1111111111111\n",
            "{3: 0, 5: 1, -4: 2, 8: 3, 11: 4, 1: 5}\n",
            "Pair found at index 4 and 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VLcRB6H4s6ya",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "92ce6c95-90f4-4bd2-ed2f-8ebac81bf16b"
      },
      "source": [
        "def subsequent_test(input_array,subseq_array):\r\n",
        "  hash_list=[]\r\n",
        "  i=0\r\n",
        "  for index in range(len(input_array)):\r\n",
        "    print(\"index\",index)\r\n",
        "    if((i<=len(subseq_array)-1)):\r\n",
        "      print(\"hai\")\r\n",
        "      if((input_array[index] == subseq_array[i])):\r\n",
        "        hash_list.append(subseq_array[i])\r\n",
        "        print(\"Sequence found are:\",hash_list)\r\n",
        "        i +=1\r\n",
        "  if (hash_list == subseq_array): \r\n",
        "    return True\r\n",
        "  elif (hash_list != subseq_array):\r\n",
        "    return False             \r\n",
        "  \r\n",
        "output = subsequent_test([5,1,22,25,6,-1,8,10],[1,6,-1,10,9])\r\n",
        "print(output)\r\n",
        "\r\n"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "index 0\n",
            "hai\n",
            "index 1\n",
            "hai\n",
            "Sequence found are: [1]\n",
            "index 2\n",
            "hai\n",
            "index 3\n",
            "hai\n",
            "index 4\n",
            "hai\n",
            "Sequence found are: [1, 6]\n",
            "index 5\n",
            "hai\n",
            "Sequence found are: [1, 6, -1]\n",
            "index 6\n",
            "hai\n",
            "index 7\n",
            "hai\n",
            "Sequence found are: [1, 6, -1, 10]\n",
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "noziv01lDrdZ"
      },
      "source": [
        "\r\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
